name: Laravel CI/CD to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: laravel-app
  APP_NAME: laravel-app

jobs:
  # Job untuk testing dan build
  test-and-build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: your-password
          MYSQL_DATABASE: laravel_prod
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Create database for testing
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS laravel_test;"

    - name: Execute tests via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_prod
        DB_USERNAME: root
        DB_PASSWORD: your-password
      run: php artisan test

    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse

    - name: Build Docker image
      run: docker build -t $APP_NAME:latest .

    - name: Run Docker container test
      run: |
        docker run -d --name test-app -p 8000:8000 $APP_NAME:latest
        sleep 30
        docker ps
        curl -f http://localhost:8000 || exit 1

    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Job untuk deployment ke Kubernetes
  deploy-to-kubernetes:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Kubernetes
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy MySQL Secret
      run: |
        kubectl apply -f kubernetes/mysql-secret.yml -n ${{ env.K8S_NAMESPACE }}

    - name: Deploy Application
      run: |
        kubectl apply -f kubernetes/ -n ${{ env.K8S_NAMESPACE }}

    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/laravel-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Run migrations
      run: |
        kubectl exec -n ${{ env.K8S_NAMESPACE }} deployment/laravel-app -- php artisan migrate --force

    - name: Run seeders if needed
      run: |
        kubectl exec -n ${{ env.K8S_NAMESPACE }} deployment/laravel-app -- php artisan db:seed --force

    - name: Verify deployment
      run: |
        kubectl get all -n ${{ env.K8S_NAMESPACE }}