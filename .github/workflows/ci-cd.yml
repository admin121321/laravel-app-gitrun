name: Laravel CI/CD to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K8S_NAMESPACE: laravel-app
  APP_NAME: laravel-app

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, sqlite
        coverage: none
        tools: composer:v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader --no-dev
        ls -la vendor/ # Debug: Check if vendor exists

    - name: Check vendor directory
      run: |
        echo "Checking vendor directory..."
        ls -la
        ls -la vendor/ || echo "Vendor directory not found"
        [ -f vendor/autoload.php ] && echo "autoload.php exists" || echo "autoload.php missing"

    - name: Copy environment file
      run: |
        cp .env.example .env
        [ -f .env ] && echo ".env created" || echo ".env creation failed"

    - name: Generate application key
      run: |
        php artisan key:generate --no-interaction
      env:
        APP_ENV: testing

    - name: Run basic Laravel checks
      run: |
        php artisan route:list --no-interaction
        php artisan --version

    # Lanjutkan dengan testing jika ada
    - name: Run tests (if any)
      run: |
        if [ -f "phpunit.xml" ] || [ -f "phpunit.xml.dist" ]; then
          composer require --dev phpunit/phpunit --no-interaction
          ./vendor/bin/phpunit --version
        else
          echo "No PHPUnit configuration found, skipping tests"
        fi

    - name: Build Docker image
      run: |
        docker build -t $APP_NAME:latest .

    - name: Test Docker image
      run: |
        docker run --rm $APP_NAME:latest php --version
        docker run --rm $APP_NAME:latest composer --version

    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-kubernetes:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Kubernetes
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy MySQL Secret
      run: |
        kubectl apply -f kubernetes/mysql-secret.yml -n ${{ env.K8S_NAMESPACE }}

    - name: Deploy Application
      run: |
        kubectl apply -f kubernetes/ -n ${{ env.K8S_NAMESPACE }}

    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/laravel-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get all -n ${{ env.K8S_NAMESPACE }}