name: Laravel CI/CD to Local Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

env:
  APP_NAME: laravel-app
  K8S_NAMESPACE: laravel-app
  MYSQL_DATABASE: laravel_db
  MYSQL_USER: laravel_user

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: laravel_test
          MYSQL_USER: laravel_test_user
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, bcmath
        coverage: xdebug

    - name: Validate composer.json
      run: composer validate --strict

    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Prepare environment
      run: |
        cp .env.example .env
        php artisan key:generate
   
    - name: Install Node dependencies
      run: npm install

    - name: Build assets
      run: npm run build
    
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -u root -prootpassword -e "SELECT 1" &>/dev/null; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -u root -prootpassword << EOF
        CREATE DATABASE IF NOT EXISTS laravel_test;
        CREATE USER IF NOT EXISTS 'laravel_test_user'@'%' IDENTIFIED BY 'testpassword';
        GRANT ALL PRIVILEGES ON laravel_test.* TO 'laravel_test_user'@'%';
        FLUSH PRIVILEGES;
        EOF

    - name: Run tests
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: laravel_test_user
        DB_PASSWORD: testpassword
      run: |
        php artisan migrate --force
        php artisan test

  build-and-deploy:
    needs: tests
    runs-on: self-hosted  # Runner di Windows dengan Docker Desktop
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run PowerShell
      shell: powershell
      run: |
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
        Get-ExecutionPolicy -List
        Write-Host "Ini PowerShell bawaan Windows"
        $PSVersionTable

    - name: Verify Environment
      shell: powershell
      run: |
        Write-Host "=== Environment Verification ===" -ForegroundColor Green
        Write-Host "Docker Version:" -ForegroundColor Yellow
        docker --version
        Write-Host "Kubernetes Version:" -ForegroundColor Yellow
        kubectl version --client
        Write-Host "Kubernetes Nodes:" -ForegroundColor Yellow
        kubectl get nodes
        Write-Host "Current Context:" -ForegroundColor Yellow
        kubectl config current-context

    - name: Build Docker Image
      shell: powershell
      run: |
        Write-Host "Building Docker image..." -ForegroundColor Cyan
        docker build -t ${{ env.APP_NAME }}:latest -t ${{ env.APP_NAME }}:${{ github.sha }} .
        Write-Host "Docker images built successfully!" -ForegroundColor Green
        docker images | Select-String "${{ env.APP_NAME }}"

    - name: Setup Kubernetes Namespace
      shell: powershell
      run: |
         kubectl create namespace laravel-app --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy MySQL Database
      shell: powershell
      run: |
        Write-Host "Deploying MySQL database..." -ForegroundColor Cyan
        
        # Apply MySQL resources
        Get-ChildItem "kubernetes/mysql-*" | ForEach-Object {
            Write-Host "Applying $($_.Name)..." -ForegroundColor White
            kubectl apply -f $_.FullName -n ${{ env.K8S_NAMESPACE }}
        }
        
        # Wait for MySQL to be ready
        Write-Host "Waiting for MySQL to be ready..." -ForegroundColor Yellow
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        Write-Host "MySQL is ready!" -ForegroundColor Green

    - name: Initialize Database
      shell: powershell
      run: |
        # Method 1: Gunakan MYSQL_PWD environment variable
        $env:MYSQL_PWD = "rootpassword"
        kubectl exec deployment/mysql -n laravel-app -- mysql -u root -e "CREATE DATABASE IF NOT EXISTS laravel;"
        
        # Method 2: Gunakan config file
        kubectl exec deployment/mysql -n laravel-app -- bash -c 'mysql --defaults-extra-file=/tmp/my.cnf -e "CREATE DATABASE IF NOT EXISTS laravel;"'

    - name: Deploy Laravel Application
      shell: powershell
      run: |
        Write-Host "Deploying Laravel application..." -ForegroundColor Cyan
        
        # Apply Laravel resources
        Get-ChildItem "kubernetes/laravel-*" | ForEach-Object {
            Write-Host "Applying $($_.Name)..." -ForegroundColor White
            kubectl apply -f $_.FullName -n ${{ env.K8S_NAMESPACE }}
        }
        
        # Wait for Laravel to be ready
        Write-Host "Waiting for Laravel application to be ready..." -ForegroundColor Yellow
        kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        Write-Host "Laravel application is ready!" -ForegroundColor Green

    - name: Run Database Migrations
      shell: powershell
      run: |
        Write-Host "Running database migrations..." -ForegroundColor Cyan
        $maxRetries = 3
        $retryCount = 0
        
        while ($retryCount -lt $maxRetries) {
            try {
                kubectl exec deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} -- php artisan migrate --force
                Write-Host "Migrations completed successfully!" -ForegroundColor Green
                break
            } catch {
                $retryCount++
                Write-Host "Migration attempt $retryCount failed. Retrying in 10 seconds..." -ForegroundColor Red
                if ($retryCount -eq $maxRetries) {
                    Write-Host "All migration attempts failed!" -ForegroundColor Red
                    exit 1
                }
                Start-Sleep -Seconds 10
            }
        }

    - name: Run Database Seeders
      shell: powershell
      run: |
        Write-Host "Running database seeders..." -ForegroundColor Cyan
        kubectl exec deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} -- php artisan db:seed --force
        Write-Host "Seeders completed successfully!" -ForegroundColor Green

    - name: Health Check
      shell: powershell
      run: |
        Write-Host "Performing health check..." -ForegroundColor Cyan
        
        # Start port forwarding
        $portForwardJob = Start-Job -ScriptBlock {
            kubectl port-forward -n ${{ env.K8S_NAMESPACE }} service/laravel-service 8080:80
        }
        
        # Wait for port forward to establish
        Start-Sleep -Seconds 15
        
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 30
            Write-Host "✅ Health check passed! HTTP Status: $($response.StatusCode)" -ForegroundColor Green
            
            # Test database connection through application
            $apiResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/health" -TimeoutSec 30
            Write-Host "✅ API health check passed!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Health check failed: $($_.Exception.Message)" -ForegroundColor Red
        } finally {
            # Stop port forwarding
            $portForwardJob | Stop-Job | Remove-Job
        }

    - name: Deployment Summary
      shell: powershell
      run: |
        $summary = @"
        # 🚀 Deployment Successful!

        **Application:** Laravel with MySQL
        **Environment:** Local Kubernetes (Docker Desktop)
        **Namespace:** ${{ env.K8S_NAMESPACE }}
        **Commit:** ${{ github.sha }}
        **Deployed at:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

        ## 📊 Deployment Status:
        $(kubectl get all -n ${{ env.K8S_NAMESPACE }} | Out-String)

        ## 🔗 Access Methods:

        1. **Port Forwarding:**
        ```powershell
        kubectl port-forward -n ${{ env.K8S_NAMESPACE }} service/laravel-service 8080:80
        ```
        Then visit: http://localhost:8080

        2. **Direct Service Access:**
        ```powershell
        kubectl get svc -n ${{ env.K8S_NAMESPACE }} laravel-service
        ```

        3. **View Logs:**
        ```powershell
        kubectl logs -f deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }}
        ```

        4. **Database Access:**
        ```powershell
        kubectl exec -it deployment/mysql -n ${{ env.K8S_NAMESPACE }} -- mysql -u root -p
        ```

        ## 🛠️ Useful Commands:
        - Check pods: `kubectl get pods -n ${{ env.K8S_NAMESPACE }}`
        - View logs: `kubectl logs -f <pod-name> -n ${{ env.K8S_NAMESPACE }}`
        - Restart deployment: `kubectl rollout restart deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }}`
        - Delete everything: `kubectl delete namespace ${{ env.K8S_NAMESPACE }}`
        "@
        
        Write-Host $summary -ForegroundColor Green
        # Set deployment summary for GitHub
        echo "$summary" >> $GITHUB_STEP_SUMMARY