name: Deploy to Windows Docker Desktop Kubernetes

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  K8S_NAMESPACE: laravel-app
  APP_NAME: laravel-app

jobs:
  deploy-to-windows:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: actions/setup-powershell@v2

    - name: Verify Windows Environment
      shell: pwsh
      run: |
        Write-Host "System Information:" -ForegroundColor Green
        systeminfo | Select-String "OS Name","OS Version"
        
        Write-Host "Docker Version:" -ForegroundColor Green
        docker --version
        
        Write-Host "Kubernetes Context:" -ForegroundColor Green
        kubectl config current-context
        kubectl cluster-info
        
        Write-Host "Nodes:" -ForegroundColor Green
        kubectl get nodes

    - name: Build Docker Image
      shell: pwsh
      run: |
        Write-Host "Building Docker image..." -ForegroundColor Yellow
        docker build -t laravel-app:latest -t laravel-app:${{ github.sha }} .
        
        Write-Host "Docker images:" -ForegroundColor Green
        docker images | Select-String "laravel-app"

    - name: Create Kubernetes Namespace
      shell: pwsh
      run: |
        $namespace = "${{ env.K8S_NAMESPACE }}"
        Write-Host "Creating namespace: $namespace" -ForegroundColor Yellow
        
        # Check if namespace exists
        $nsExists = kubectl get namespace $namespace 2>&1 | Out-Null; $?
        if (-not $nsExists) {
            kubectl create namespace $namespace
            Write-Host "Namespace created" -ForegroundColor Green
        } else {
            Write-Host "Namespace already exists" -ForegroundColor Blue
        }

    - name: Deploy MySQL Database
      shell: pwsh
      run: |
        Write-Host "Deploying MySQL..." -ForegroundColor Yellow
        
        # Apply MySQL manifests
        kubectl apply -f kubernetes/mysql-secret.yml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f kubernetes/mysql-pvc.yml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f kubernetes/mysql-deployment.yml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f kubernetes/mysql-service.yml -n ${{ env.K8S_NAMESPACE }}
        
        Write-Host "Waiting for MySQL to be ready..." -ForegroundColor Yellow
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Deploy Laravel Application
      shell: pwsh
      run: |
        Write-Host "Deploying Laravel application..." -ForegroundColor Yellow
        
        kubectl apply -f kubernetes/laravel-deployment.yml -n ${{ env.K8S_NAMESPACE }}
        kubectl apply -f kubernetes/laravel-service.yml -n ${{ env.K8S_NAMESPACE }}
        
        Write-Host "Waiting for Laravel to be ready..." -ForegroundColor Yellow
        kubectl wait --for=condition=ready pod -l app=laravel-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s

    - name: Run Database Migrations
      shell: pwsh
      run: |
        Write-Host "Running database migrations..." -ForegroundColor Yellow
        kubectl exec deployment/laravel-app -n ${{ env.K8S_NAMESPACE }} -- php artisan migrate --force

    - name: Create Windows Ingress
      shell: pwsh
      run: |
        Write-Host "Setting up ingress for Windows..." -ForegroundColor Yellow
        
        # Untuk Windows, kita gunakan port forwarding saja
        kubectl apply -f kubernetes/windows-ingress.yml -n ${{ env.K8S_NAMESPACE }}

    - name: Verify Deployment
      shell: pwsh
      run: |
        Write-Host "=== Deployment Verification ===" -ForegroundColor Green
        
        Write-Host "Pods:" -ForegroundColor Cyan
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
        
        Write-Host "Services:" -ForegroundColor Cyan
        kubectl get svc -n ${{ env.K8S_NAMESPACE }}
        
        Write-Host "Deployments:" -ForegroundColor Cyan
        kubectl get deployments -n ${{ env.K8S_NAMESPACE }}

    - name: Test Application
      shell: pwsh
      run: |
        Write-Host "Testing application..." -ForegroundColor Yellow
        
        # Start port forwarding in background
        Start-Job -ScriptBlock {
            kubectl port-forward -n ${{ env.K8S_NAMESPACE }} service/laravel-service 8080:80
        }
        
        # Wait for port forward to establish
        Start-Sleep -Seconds 10
        
        # Test the application
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 30
            Write-Host "Application is responding: HTTP $($response.StatusCode)" -ForegroundColor Green
        } catch {
            Write-Host "Application test failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Stop port forwarding
        Get-Job | Stop-Job | Remove-Job

    - name: Deployment Summary
      shell: pwsh
      run: |
        $summary = @"
        # ðŸš€ Deployment Successful!
        
        **Environment:** Windows Docker Desktop Kubernetes
        **Namespace:** ${{ env.K8S_NAMESPACE }}
        **Commit:** ${{ github.sha }}
        **Timestamp:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        
        ## Access Methods:
        
        1. **Port Forwarding:**
        ```powershell
        kubectl port-forward -n ${{ env.K8S_NAMESPACE }} service/laravel-service 8080:80
        ```
        Then visit: http://localhost:8080
        
        2. **Service URL:**
        ```powershell
        kubectl get svc -n ${{ env.K8S_NAMESPACE }} laravel-service
        ```
        
        3. **Pod Logs:**
        ```powershell
        kubectl logs -f deployment/laravel-app -n ${{ env.K8S_NAMESPACE }}
        ```
        "@
        
        Write-Host $summary -ForegroundColor Green